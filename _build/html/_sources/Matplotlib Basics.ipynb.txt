{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "    import matplotlib.pyplot as plt\n",
    "    import numpy as np\n",
    "\n",
    "    x = np.random.randn(10000)\n",
    "    plt.hist(x,100)\n",
    "    plt.title(r'Normal distribution with $\\mu=0, \\sigma=1$')\n",
    "    plt.savefig('matplotlib_histogram.png')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.plot(5,5,'o')\n",
    "plt.show()\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: xlrd in /Users/leekent/anaconda3/lib/python3.6/site-packages (1.1.0)\n",
      "\u001b[31mdistributed 1.21.8 requires msgpack, which is not installed.\u001b[0m\n",
      "\u001b[33mYou are using pip version 10.0.1, however version 18.0 is available.\n",
      "You should consider upgrading via the 'pip install --upgrade pip' command.\u001b[0m\n",
      "xlrd installed!\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "#from __future__ import print_function only for python 2\n",
    "\n",
    "!pip install xlrd\n",
    "\n",
    "print('xlrd installed!')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
